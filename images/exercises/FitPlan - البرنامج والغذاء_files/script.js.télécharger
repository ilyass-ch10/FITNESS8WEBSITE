// Mettre l'année automatiquement
document.getElementById('year').textContent = new Date().getFullYear();

const form = document.getElementById('userForm');
const results = document.getElementById('results');
const summary = document.getElementById('summary');
const workoutPlan = document.getElementById('workoutPlan');
const mealPlan = document.getElementById('mealPlan');

// IMAGES LOCALES pour chaque exercice
const exerciseImages = {
  "Squats": {
    image: "images/exercises/squats.gif",
    description: "Pieds écartés largeur épaules, descendez comme pour vous asseoir en gardant le dos droit, remontez en poussant sur les talons."
  },
  "Bench Press": {
    image: "images/exercises/bench-press.gif",
    description: "Allongé sur le banc, saisissez la barre plus large que les épaules. Descendez vers la poitrine, puis poussez vers le haut."
  },
  "Pull-Ups": {
    image: "images/exercises/pull-ups.gif",
    description: "Suspendu à la barre, tirez votre corps vers le haut jusqu'au menton au-dessus de la barre. Redescendez lentement."
  },
  "Shoulder Press": {
    image: "images/exercises/shoulder-press.gif",
    description: "Debout ou assis, poussez les haltères au-dessus de la tête jusqu'à extension complète des bras."
  },
  "Deadlifts": {
    image: "images/exercises/deadlifts.gif",
    description: "Dos droit, saisissez la barre. Soulevez en poussant avec les jambes, gardez la barre près du corps."
  },
  "Lunges": {
    image: "images/exercises/lunges.gif",
    description: "Grand pas en avant, descendez jusqu'à ce que le genou arrière touche presque le sol. Poussez pour revenir."
  },
  "Push-Ups": {
    image: "images/exercises/push-ups.gif",
    description: "Position planche, mains sous les épaules. Descendez le corps en gardant le dos droit, remontez."
  },
  "Rows": {
    image: "images/exercises/rows.gif",
    description: "Penché en avant dos droit, tirez la barre vers le torse en contractant les dorsaux."
  },
  "Biceps Curl": {
    image: "images/exercises/biceps-curl.gif",
    description: "Debout, coudes collés au corps, fléchissez les bras pour amener les haltères vers les épaules."
  },
  "Triceps Dips": {
    image: "images/exercises/triceps-dips.gif",
    description: "Sur banc ou barres parallèles, descendez le corps en fléchissant les coudes, remontez."
  },
  "Plank": {
    image: "images/exercises/plank.gif",
    description: "Position planche sur avant-bras, corps gainé et droit. Maintenez la position."
  },
  "Burpees": {
    image: "images/exercises/burpees.gif",
    description: "Squat → Planche → Pompe → Saut → Répétition. Mouvement complet et explosif."
  },
  "Leg Raises": {
    image: "images/exercises/leg-raises.gif",
    description: "Allongé sur le dos, levez les jambes droites vers le plafond, redescendez avec contrôle."
  },
  "Russian Twist": {
    image: "images/exercises/russian-twist.gif",
    description: "Assis, jambes relevées, tournez le torse de gauche à droite en contractant les obliques."
  },
  "Calf Raises": {
    image: "images/exercises/calf-raises.gif",
    description: "Debout, montez sur la pointe des pieds en contractant les mollets, redescendez lentement."
  },
  "Mountain Climbers": {
    image: "images/exercises/mountain-climbers.gif",
    description: "Position planche, ramenez alternativement les genoux vers la poitrine rapidement."
  },
  "Jump Squats": {
    image: "images/exercises/jump-squats.gif",
    description: "Squat suivi d'un saut explosif, atterrissez en douceur et enchaînez."
  },
  "Jumping Jacks": {
    image: "images/exercises/jumping-jacks.gif",
    description: "Sauts avec écarts simultanés des jambes et des bras. Excellent pour le cardio."
  },
  "Running": {
    image: "images/exercises/running.gif",
    description: "Course à pied pour améliorer l'endurance cardiovasculaire et brûler des calories."
  },
  "Cycling": {
    image: "images/exercises/cycling.gif",
    description: "Vélo pour un cardio à faible impact sur les articulations."
  },
  // NOUVEAUX EXERCICES AJOUTÉS
  "Lat Pulldown": {
    image: "images/exercises/lat-pulldown.gif",
    description: "Assis à la machine, tirez la barre vers la poitrine en contractant les dorsaux."
  },
  "Leg Press": {
    image: "images/exercises/leg-press.gif",
    description: "Sur la machine, poussez la plateforme avec les jambes pour travailler quadriceps et fessiers."
  },
  "Chest Fly": {
    image: "images/exercises/chest-fly.gif",
    description: "Allongé, écartez les haltères en arc de cercle pour étirer et contracter les pectoraux."
  },
  "Lateral Raises": {
    image: "images/exercises/lateral-raises.gif",
    description: "Debout, levez les haltères sur les côtés jusqu'à hauteur d'épaules pour les deltoïdes."
  },
  "Hammer Curl": {
    image: "images/exercises/hammer-curl.gif",
    description: "Curl avec prise marteau pour travailler biceps et avant-bras sous un angle différent."
  },
  "Skull Crusher": {
    image: "images/exercises/skull-crusher.gif",
    description: "Allongé, fléchissez les coudes pour descendre la barre vers le front. Excellent pour les triceps."
  },
  "Leg Curl": {
    image: "images/exercises/leg-curl.gif",
    description: "À la machine, fléchissez les jambes pour isoler les ischio-jambiers."
  },
  "Leg Extension": {
    image: "images/exercises/leg-extension.gif",
    description: "À la machine, étendez les jambes pour cibler spécifiquement les quadriceps."
  },
  "Cable Crossover": {
    image: "images/exercises/cable-crossover.gif",
    description: "Debout entre deux poulies, croisez les câbles devant vous pour les pectoraux."
  },
  "Face Pull": {
    image: "images/exercises/face-pull.gif",
    description: "À la poulie haute, tirez vers votre visage pour renforcer les rotateurs externes."
  },
  "Shrugs": {
    image: "images/exercises/shrugs.gif",
    description: "Debout, haussez les épaules avec une barre ou haltères pour les trapèzes."
  },
  "Preacher Curl": {
    image: "images/exercises/preacher-curl.gif",
    description: "Assis au banc preacher, effectuez des curls pour isoler parfaitement les biceps."
  },
  "Incline Bench Press": {
    image: "images/exercises/incline-bench-press.gif",
    description: "Sur banc incliné, développez pour cibler la partie haute des pectoraux."
  },
  "Decline Bench Press": {
    image: "images/exercises/decline-bench-press.gif",
    description: "Sur banc décliné, développez pour cibler la partie basse des pectoraux."
  },
  "Front Squats": {
    image: "images/exercises/front-squats.gif",
    description: "Barre devant les épaules, squat pour cibler quadriceps et gainage."
  },
  "Box Jumps": {
    image: "images/exercises/box-jumps.gif",
    description: "Sauts explosifs sur une box pour développer puissance et explosivité."
  },
  "Front Raises": {
    image: "images/exercises/front-raises.gif",
    description: "Debout, levez les haltères devant vous pour les deltoïdes antérieurs."
  },
  "Triceps Pushdown": {
    image: "images/exercises/triceps-pushdown.gif",
    description: "À la poulie haute, poussez la barre vers le bas pour cibler les triceps."
  },
  "Romanian Deadlifts": {
    image: "images/exercises/romanian-deadlifts.gif",
    description: "Jambes semi-tendues, penchez-vous en avant pour cibler les ischio-jambiers."
  },
  "Good Mornings": {
    image: "images/exercises/good-mornings.gif",
    description: "Barre sur les épaules, penchez le buste en avant pour renforcer le bas du dos."
  },
  "Hip Thrust": {
    image: "images/exercises/hip-thrust.gif",
    description: "Allongé, poussez les hanches vers le plafond pour développer les fessiers."
  },
  "Pullovers": {
    image: "images/exercises/pullovers.gif",
    description: "Allongé, descendez un haltère derrière la tête pour pectoraux et dorsaux."
  },
  "Upright Rows": {
    image: "images/exercises/upright-rows.gif",
    description: "Debout, tirez la barre vers le menton pour les trapèzes et épaules."
  },
  "Reverse Fly": {
    image: "images/exercises/reverse-fly.gif",
    description: "Penché en avant, écartez les haltères pour les muscles du dos postérieur."
  },
  "Concentration Curl": {
    image: "images/exercises/concentration-curl.gif",
    description: "Assis, curl un bras à la fois pour une isolation maximale des biceps."
  },
  "Overhead Triceps": {
    image: "images/exercises/overhead-tricep.gif",
    description: "Assis ou debout, étendez les bras au-dessus de la tête pour les triceps."
  },
  "Cable Crunch": {
    image: "images/exercises/cable-crunch.gif",
    description: "À genoux à la poulie haute, crunch pour les abdominaux avec résistance."
  },
  "Hanging Leg Raise": {
    image: "images/exercises/hanging-leg-raise.gif",
    description: "Suspendu à la barre, levez les jambes pour un travail abdominal complet."
  },
  "Farmer's Walk": {
    image: "images/exercises/farmers-walk.gif",
    description: "Marchez avec des haltères lourds pour la force de préhension et le corps entier."
  },
  "Battle Ropes": {
    image: "images/exercises/battle-ropes.gif",
    description: "Agitez les cordes lourdes pour un cardio intense et le haut du corps."
  },
  "Kettlebell Swing": {
    image: "images/exercises/kettlebell-swing.gif",
    description: "Balancez le kettlebell entre les jambes pour un exercice de puissance complet."
  }
};

// FONCTION POUR FILTRER LES EXERCICES EXISTANTS
function filterExistingExercises(exerciseList) {
  return exerciseList.filter(ex => {
    const exerciseName = extractExerciseName(ex);
    const exists = exerciseImages.hasOwnProperty(exerciseName);
    if (!exists) {
      console.log(`⚠️ Exercice non trouvé et retiré: "${exerciseName}"`);
    }
    return exists;
  });
}

// PROGRAMMES D'ENTRAÎNEMENT AVEC FILTRAGE AUTOMATIQUE
const programs = {
  gain: {
    1: [["Full Body", filterExistingExercises(["Squats 4x12", "Bench Press 4x12", "Pull-Ups 3x10", "Shoulder Press 3x12", "Plank 3x1min"])]],
    2: [
      ["Upper Body", filterExistingExercises(["Bench Press 4x12", "Rows 4x12", "Shoulder Press 3x12", "Biceps Curl 3x15", "Triceps Dips 3x12"])],
      ["Lower Body", filterExistingExercises(["Squats 4x15", "Deadlifts 3x10", "Leg Press 3x12", "Calf Raises 3x20"])]
    ],
    3: [
      ["Push (Pec/Épaules/Triceps)", filterExistingExercises(["Bench Press 4x12", "Shoulder Press 3x12", "Chest Fly 3x15", "Triceps Dips 3x12", "Lateral Raises 3x15"])],
      ["Pull (Dos/Biceps)", filterExistingExercises(["Pull-Ups 3x10", "Rows 4x12", "Lat Pulldown 3x12", "Biceps Curl 3x15", "Face Pull 3x15"])],
      ["Legs (Jambes)", filterExistingExercises(["Squats 4x15", "Leg Press 4x12", "Leg Curl 3x15", "Lunges 3x15", "Calf Raises 4x20"])]
    ],
    4: [
      ["Chest & Triceps", filterExistingExercises(["Bench Press 4x12", "Incline Bench Press 3x12", "Chest Fly 3x15", "Triceps Dips 4x12", "Skull Crusher 3x12"])],
      ["Back & Biceps", filterExistingExercises(["Pull-Ups 4x10", "Rows 4x12", "Lat Pulldown 3x12", "Biceps Curl 4x15", "Hammer Curl 3x15"])],
      ["Legs", filterExistingExercises(["Squats 4x15", "Leg Press 4x12", "Leg Extension 3x15", "Leg Curl 3x15", "Calf Raises 4x20"])],
      ["Shoulders & Abs", filterExistingExercises(["Shoulder Press 4x12", "Lateral Raises 4x15", "Face Pull 3x15", "Leg Raises 3x15"])]
    ],
    5: [
      ["Chest", filterExistingExercises(["Bench Press 4x12", "Incline Bench Press 3x12", "Chest Fly 3x15", "Cable Crossover 3x15", "Push-Ups 3x15"])],
      ["Back", filterExistingExercises(["Pull-Ups 4x10", "Rows 4x12", "Lat Pulldown 3x12", "Shrugs 3x15"])],
      ["Shoulders", filterExistingExercises(["Shoulder Press 4x12", "Lateral Raises 4x15", "Front Raises 3x15", "Face Pull 3x15"])],
      ["Legs", filterExistingExercises(["Squats 4x15", "Leg Press 4x12", "Leg Extension 3x15", "Leg Curl 3x15", "Calf Raises 4x20"])],
      ["Arms", filterExistingExercises(["Biceps Curl 4x15", "Preacher Curl 3x15", "Triceps Dips 4x12", "Skull Crusher 3x12", "Hammer Curl 3x15"])]
    ],
    6: [
      ["Chest & Triceps", filterExistingExercises(["Bench Press 4x12", "Incline Bench Press 3x12", "Chest Fly 3x15", "Triceps Dips 4x12", "Skull Crusher 3x12"])],
      ["Back & Biceps", filterExistingExercises(["Pull-Ups 4x10", "Rows 4x12", "Lat Pulldown 3x12", "Biceps Curl 4x15", "Preacher Curl 3x15"])],
      ["Legs", filterExistingExercises(["Squats 4x15", "Leg Press 4x12", "Leg Extension 3x15", "Leg Curl 3x15", "Calf Raises 4x20"])],
      ["Shoulders", filterExistingExercises(["Shoulder Press 4x12", "Lateral Raises 4x15", "Front Raises 3x15", "Upright Rows 3x15"])],
      ["Arms & Abs", filterExistingExercises(["Biceps Curl 4x15", "Triceps Dips 4x12", "Concentration Curl 3x15"])],
      ["Cardio", filterExistingExercises(["Running 30min"])]
    ],
    7: [
      ["Chest", filterExistingExercises(["Bench Press 4x12", "Incline Bench Press 3x12", "Decline Bench Press 3x12", "Cable Crossover 3x15"])],
      ["Back", filterExistingExercises(["Pull-Ups 4x10", "Rows 4x12", "Lat Pulldown 3x12", "Pullovers 3x12"])],
      ["Shoulders", filterExistingExercises(["Shoulder Press 4x12", "Lateral Raises 4x15", "Front Raises 3x15", "Reverse Fly 3x15"])],
      ["Legs", filterExistingExercises(["Squats 4x15", "Leg Press 4x12", "Romanian Deadlifts 3x12", "Hip Thrust 3x15", "Calf Raises 4x20"])],
      ["Arms", filterExistingExercises(["Biceps Curl 4x15", "Triceps Dips 4x12", "Preacher Curl 3x15", "Skull Crusher 3x12"])],
      ["Core", filterExistingExercises(["Leg Raises 3x15", "Russian Twist 3x20", "Cable Crunch 3x15"])],
      ["Rest", ["Récupération active - Étirements"]]
    ]
  },
  lose: {
    1: [["Full Body HIIT", filterExistingExercises(["Burpees 4x15", "Jump Squats 3x20", "Push-Ups 3x15", "Mountain Climbers 3x30"])]],
    2: [
      ["Cardio & Core", filterExistingExercises(["Running 30min", "Plank 3x1min", "Mountain Climbers 3x30", "Russian Twist 3x20"])],
      ["Full Body", filterExistingExercises(["Squats 3x15", "Push-Ups 3x15", "Lunges 3x15", "Rows 3x15"])]
    ],
    3: [
      ["HIIT Circuit", filterExistingExercises(["Burpees 4x15", "Jumping Jacks 3x30", "Mountain Climbers 3x30", "Battle Ropes 3x30s"])],
      ["Strength", filterExistingExercises(["Squats 3x15", "Push-Ups 3x15", "Lat Pulldown 3x15"])],
      ["Cardio", filterExistingExercises(["Running 40min", "Cycling 20min"])]
    ],
    4: [
      ["HIIT Full Body", filterExistingExercises(["Burpees 4x15", "Box Jumps 3x10", "Kettlebell Swing 3x15", "Mountain Climbers 3x30"])],
      ["Upper Body", filterExistingExercises(["Push-Ups 3x15", "Rows 3x15", "Shoulder Press 3x12"])],
      ["Lower Body", filterExistingExercises(["Squats 3x15", "Lunges 3x15", "Leg Press 3x15"])],
      ["Cardio", filterExistingExercises(["Cycling 45min", "Jump Rope 15min"])]
    ]
  },
  maintain: {
    1: [["Full Body", filterExistingExercises(["Squats 3x12", "Push-Ups 3x12", "Rows 3x12", "Plank 3x1min", "Lunges 3x12"])]],
    2: [
      ["Strength", filterExistingExercises(["Squats 3x12", "Push-Ups 3x12", "Shoulder Press 3x12"])],
      ["Cardio", filterExistingExercises(["Running 30min", "Plank 3x1min", "Jumping Jacks 3x30"])]
    ],
    3: [
      ["Full Body", filterExistingExercises(["Squats 3x12", "Push-Ups 3x12", "Rows 3x12", "Biceps Curl 3x12"])],
      ["Cardio", filterExistingExercises(["Running 35min", "Cycling 20min"])],
      ["Maintenance", filterExistingExercises(["Bodyweight Squats 3x15", "Plank 3x1min", "Leg Raises 3x15"])]
    ]
  }
};

// Plans alimentaires
const meals = {
  gain: `
    <div class="meal-plan-content">
      <div class="meal-section">
        <h3>🍳 Petit-déjeuner</h3>
        <ul>
          <li>Œufs (2-3)</li>
          <li>Pain complet</li>
          <li>Lait 250ml</li>
          <li>Banane</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🥛 Collation</h3>
        <ul>
          <li>Shaker protéiné</li>
          <li>Amandes 20g</li>
          <li>Fruit frais</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🍗 Déjeuner</h3>
        <ul>
          <li>Poulet 150g</li>
          <li>Riz complet 100g</li>
          <li>Légumes vapeur</li>
          <li>Huile d'olive</li>
        </ul>
      </div>
    </div>
  `,
  lose: `
    <div class="meal-plan-content">
      <div class="meal-section">
        <h3>🍳 Petit-déjeuner</h3>
        <ul>
          <li>Yaourt 150g</li>
          <li>Baies 100g</li>
          <li>Thé vert</li>
          <li>1 fruit frais</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🥗 Collation</h3>
        <ul>
          <li>Pomme ou poire</li>
          <li>Poignée de noix</li>
          <li>Eau abondante</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🐟 Déjeuner</h3>
        <ul>
          <li>Poisson 150g</li>
          <li>Légumes 150g</li>
          <li>Quinoa 80g</li>
          <li>Salade verte</li>
        </ul>
      </div>
    </div>
  `,
  maintain: `
    <div class="meal-plan-content">
      <div class="meal-section">
        <h3>🍳 Petit-déjeuner</h3>
        <ul>
          <li>Pain complet 2 tranches</li>
          <li>Fromage 30g</li>
          <li>1 œuf</li>
          <li>Café</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🥜 Collation</h3>
        <ul>
          <li>Poignée de noix</li>
          <li>Fruit frais</li>
          <li>Eau</li>
        </ul>
      </div>
      <div class="meal-section">
        <h3>🍗 Déjeuner</h3>
        <ul>
          <li>Viande 150g</li>
          <li>Riz 100g</li>
          <li>Légumes 100g</li>
          <li>Yaourt nature</li>
        </ul>
      </div>
    </div>
  `
};

const goalText = {
  gain: 'Prendre du muscle', 
  lose: 'Perdre du poids', 
  maintain: 'Maintenir'
};

// Fonction pour calculer les calories
function calculateCalories(w, h, a, s, g, sess) {
  let bmr = (10 * w) + (6.25 * h) - (5 * a) + (s === 'male' ? 5 : -161);
  const activityFactors = {1:1.2, 2:1.375, 3:1.55, 4:1.725, 5:1.9, 6:2.0, 7:2.2};
  const activityFactor = activityFactors[sess] || 1.55;
  
  let maintenanceCalories = Math.round(bmr * activityFactor);
  let targetCalories = maintenanceCalories + {gain:300, lose:-500, maintain:0}[g];
  
  return {
    bmr: Math.round(bmr),
    maintenance: maintenanceCalories,
    target: targetCalories,
    protein: Math.round(w * 1.8),
    carbs: Math.round(targetCalories * 0.5 / 4),
    fat: Math.round(targetCalories * 0.25 / 9)
  };
}

// Créer la modal pour les images
function createExerciseModal() {
  const modal = document.createElement('div');
  modal.className = 'exercise-modal';
  modal.innerHTML = `
    <div class="modal-content">
      <button class="modal-close">&times;</button>
      <h3 class="exercise-name-modal" id="modalExerciseName"></h3>
      <div class="exercise-image-container">
        <img class="exercise-image" id="modalExerciseImage" src="" alt="Exercise demonstration">
      </div>
      <p class="exercise-description" id="modalExerciseDescription"></p>
    </div>
  `;
  document.body.appendChild(modal);

  modal.addEventListener('click', (e) => {
    if (e.target === modal || e.target.classList.contains('modal-close')) {
      modal.classList.remove('active');
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      modal.classList.remove('active');
    }
  });

  return modal;
}

const exerciseModal = createExerciseModal();

// Afficher l'image de l'exercice
function showExerciseImage(exerciseName) {
  const exerciseData = exerciseImages[exerciseName];
  
  if (exerciseData) {
    document.getElementById('modalExerciseName').textContent = exerciseName;
    document.getElementById('modalExerciseImage').src = exerciseData.image;
    document.getElementById('modalExerciseDescription').textContent = exerciseData.description;
    exerciseModal.classList.add('active');
  }
}

// Extraire le nom de l'exercice
function extractExerciseName(fullText) {
  return fullText.replace(/\s*\d+x\d+\s*/, '')
                .replace(/\s*\d+min\s*/, '')
                .replace(/\s*\d+sec\s*/, '')
                .replace(/\s*\d+\s*/, '')
                .trim();
}

// Gestion du formulaire
form.addEventListener('submit', (e) => {
  e.preventDefault();
  
  const weight = parseFloat(document.getElementById('weight').value);
  const height = parseFloat(document.getElementById('height').value);
  const age = parseInt(document.getElementById('age').value);
  const sex = document.getElementById('sex').value;
  const goal = document.getElementById('goal').value;
  const sessions = parseInt(document.getElementById('sessions').value);

  const bmi = (weight / ((height / 100) ** 2)).toFixed(1);
  const calories = calculateCalories(weight, height, age, sex, goal, sessions);

  // Afficher le résumé
  summary.innerHTML = `
    <div class="calories-summary">
      <p><strong>Poids:</strong> ${weight} kg | <strong>Taille:</strong> ${height} cm | <strong>IMC:</strong> ${bmi}</p>
      <p><strong>Objectif:</strong> ${goalText[goal]} | <strong>Séances/semaine:</strong> ${sessions}</p>
      <div class="calories-box">
        <h4>📊 BESOINS CALORIQUES</h4>
        <p><strong>Métabolisme de base:</strong> ${calories.bmr} kcal/jour</p>
        <p><strong>Maintenance:</strong> ${calories.maintenance} kcal/jour</p>
        <p><strong>Objectif ${goalText[goal]}:</strong> <span class="highlight">${calories.target} kcal/jour</span></p>
        <p><strong>Protéines:</strong> ${calories.protein}g | <strong>Glucides:</strong> ${calories.carbs}g | <strong>Lipides:</strong> ${calories.fat}g</p>
      </div>
    </div>
  `;

  // Générer le programme d'entraînement
  const workoutProgram = programs[goal][sessions] || programs[goal][3];
  
  // Filtrer les jours qui ont au moins un exercice
  const filteredProgram = workoutProgram.filter(day => day[1].length > 0);
  
  if (filteredProgram.length === 0) {
    workoutPlan.innerHTML = `<p class="muted">Aucun programme disponible avec les exercices actuels.</p>`;
  } else {
    workoutPlan.innerHTML = `
      <div class="workout-plan">
        ${filteredProgram.map((day, index) => `
          <div class="workout-day">
            <h3 class="workout-day-title">Jour ${index + 1} : ${day[0]}</h3>
            <ul class="exercise-list">
              ${day[1].map(ex => `
                <li class="exercise-item" data-exercise="${extractExerciseName(ex)}">
                  <span class="exercise-text">${ex}</span>
                  <button class="exercise-btn" title="Voir la démonstration">
                    <span class="exercise-icon">🖼️</span>
                    Voir
                  </button>
                </li>
              `).join('')}
            </ul>
          </div>
        `).join('')}
      </div>
    `;

    // Ajouter les événements de clic pour les exercices
    const exerciseBtns = workoutPlan.querySelectorAll('.exercise-btn');
    exerciseBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const exerciseItem = btn.closest('.exercise-item');
        const exerciseName = exerciseItem.getAttribute('data-exercise');
        showExerciseImage(exerciseName);
      });
    });
  }

  // Afficher le plan alimentaire
  mealPlan.innerHTML = meals[goal];
  
  // Afficher les résultats
  results.classList.remove('hidden');
  setTimeout(() => {
    results.classList.add('show');
    results.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }, 50);
});
// Ajouter ces lignes à la fin de votre script.js existant

// MODIFIER la fonction form.addEventListener pour inclure la sauvegarde
form.addEventListener('submit', (e) => {
  e.preventDefault();
  
  const userData = {
    weight: parseFloat(document.getElementById('weight').value),
    height: parseFloat(document.getElementById('height').value),
    age: parseInt(document.getElementById('age').value),
    sex: document.getElementById('sex').value,
    goal: document.getElementById('goal').value,
    sessions: parseInt(document.getElementById('sessions').value)
  };

  // ... (votre code existant pour calculer et afficher)

  // SAUVEGARDER les données
  saveManager.saveCurrentPlan(userData, workoutProgram, meals[goal]);
  
  // SUIVI ANALYTIQUES
  fitnessAnalytics.saveUserData(userData, {
    workout: workoutProgram,
    meal: meals[goal],
    calories: calculateCalories(userData.weight, userData.height, userData.age, userData.sex, userData.goal, userData.sessions)
  });

  // AFFICHER LES NOUVELLES SECTIONS
  document.getElementById('progressSection').style.display = 'block';
  document.getElementById('managementSection').style.display = 'block';
  
  // METTRE À JOUR LES STATISTIQUES
  updateStatsDisplay();
  
  // PLANIFIER LES RAPPELS
  fitnessNotifications.scheduleWorkoutReminders();
});

// Fonction pour mettre à jour l'affichage des stats
function updateStatsDisplay() {
  const stats = fitnessAnalytics.getUserStats();
  
  document.getElementById('totalWorkouts').textContent = stats.totalWorkouts;
  document.getElementById('currentStreak').textContent = stats.currentStreak;
  document.getElementById('caloriesBurned').textContent = stats.totalCalories;
  
  fitnessAnalytics.updateProgressChart();
}

// MODIFIER l'affichage des exercices pour ajouter le bouton de complétion
// Dans la partie workoutPlan.innerHTML, modifier comme suit :
workoutPlan.innerHTML = `
  <div class="workout-plan">
    ${filteredProgram.map((day, index) => `
      <div class="workout-day">
        <div class="workout-header">
          <h3 class="workout-day-title">Jour ${index + 1} : ${day[0]}</h3>
          <button class="completion-btn" onclick="fitnessAnalytics.completeWorkout(${index})" 
                  data-translate="Mark Complete">✓ Terminer</button>
        </div>
        <ul class="exercise-list">
          ${day[1].map(ex => `
            <li class="exercise-item" data-exercise="${extractExerciseName(ex)}">
              <span class="exercise-text">${ex}</span>
              <button class="exercise-btn" title="Voir la démonstration">
                <span class="exercise-icon">🖼️</span>
                <span data-translate="See">Voir</span>
              </button>
            </li>
          `).join('')}
        </ul>
      </div>
    `).join('')}
  </div>
`;

console.log("✅ FitPlan chargé avec filtrage automatique des exercices");